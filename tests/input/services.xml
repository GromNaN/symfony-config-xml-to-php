<?xml version="1.0" encoding="UTF-8"?>
<container xmlns="http://symfony.com/schema/dic/services">

  <imports>
    <import resource="other_services.xml" ignore-errors="not_found" type="xml"/>
  </imports>

  <parameters type="collection" key="main">
    <parameter id="param1" type="string" key="db_host">localhost</parameter>
    <parameter id="param2" type="constant" key="db_port">3306</parameter>
    <parameter id="param3" type="binary" key="db_pass">cGFzc3dvcmQ=</parameter>
    <parameter id="param4" type="string" key="nested">
      <parameter id="param4_1" type="string" key="sub">value</parameter>
    </parameter>
  </parameters>

  <services>
    <defaults public="true" autowire="true" autoconfigure="true">
      <tag name="default_tag"/>
      <bind key="$defaultParam">defaultValue</bind>
    </defaults>

    <service id="app.my_service" class="App\MyService" shared="true" public="true" synthetic="false" lazy="true" abstract="false" alias="app.alias" parent="app.parent" decorates="app.decorated" decoration-on-invalid="ignore" decoration-inner-name="inner" decoration-priority="10" autowire="true" autoconfigure="true" constructor="__construct">
      <file>src/MyService.php</file>
      <argument type="string">value1</argument>
      <argument key="param2" type="service">
        <service id="app.dependency" class="App\Dependency"/>
      </argument>
      <!-- Inline service example -->
      <argument key="inline" type="service">
        <service id="app.inline_service" class="App\InlineService">
          <argument type="string">inline_value</argument>
        </service>
      </argument>
      <configurator service="app.configurator" method="configure"/>
      <factory class="App\Factory" method="create"/>
      <from-callable function="createService"/>
      <deprecated package="my/package" version="1.0">This service is deprecated.</deprecated>
      <call method="setSomething" returns-clone="false">
        <argument>callArg</argument>
      </call>
      <tag name="custom_tag">
        <attribute name="attr1">val1</attribute>
      </tag>
      <resource-tag name="resource_tag"/>
      <property name="property1" type="string">propertyValue</property>
      <bind key="$param">bindValue</bind>
    </service>

    <prototype namespace="App\Prototype" resource="src/Prototype" exclude="src/Prototype/Exclude" shared="false" public="false" lazy="false" abstract="true" parent="app.parent" autowire="true" autoconfigure="true" constructor="__construct">
      <argument key="protoArg">protoValue</argument>
      <configurator function="configureProto"/>
      <factory class="App\ProtoFactory" method="createProto"/>
      <deprecated package="my/package" version="2.0">Prototype deprecated.</deprecated>
      <call method="initProto"/>
      <tag name="proto_tag"/>
      <resource-tag name="proto_resource_tag"/>
      <property name="protoProperty">protoPropertyValue</property>
      <bind key="$protoParam">protoBindValue</bind>
      <exclude>src/Prototype/Exclude/Extra</exclude>
    </prototype>

    <!-- Example using instanceof to apply configuration conditionally -->
    <instanceof id="App\Interface" shared="true" public="true" lazy="true" autowire="true" autoconfigure="true" constructor="__construct">
      <configurator function="configureInstance"/>
      <call method="initInstance"/>
      <tag name="instance_tag"/>
      <property name="instanceProperty">instanceValue</property>
      <bind key="$instanceParam">instanceBindValue</bind>
    </instanceof>

    <service id="api_platform.openapi.normalizer" class="ApiPlatform\OpenApi\Serializer\OpenApiNormalizer" public="false">
      <argument type="service">
        <service class="Symfony\Component\Serializer\Serializer">
          <argument type="collection">
            <argument type="service">
              <service class="Symfony\Component\Serializer\Normalizer\ObjectNormalizer">
                <argument>null</argument>
                <argument>null</argument>
                <argument type="service" id="api_platform.property_accessor"/>
                <argument type="service" id="api_platform.property_info"/>
              </service>
            </argument>
          </argument>
          <argument type="collection">
            <argument type="service" id="serializer.encoder.json" />
          </argument>
        </service>
      </argument>

      <!-- Just after the DocumentationNormalizer see swagger.xml -->
      <tag name="serializer.normalizer" priority="-795" />
    </service>

    <stack id="app.stack" public="true">
      <service id="app.stack_service" class="App\StackService"/>
      <deprecated package="my/package" version="3.0">Stack deprecated.</deprecated>
    </stack>
  </services>

  <when env="dev">
    <imports>
      <import resource="dev_services.xml"/>
    </imports>
    <parameters>
      <parameter id="dev_param" type="string" key="debug">true</parameter>
    </parameters>
    <services>
      <service id="app.dev_service" class="App\DevService"/>
    </services>
  </when>
</container>
